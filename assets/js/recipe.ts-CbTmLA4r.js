class e{constructor(e,t){if(this.val=0,this.destination=null,this.origin=null,"number"==typeof t&&(this.val=t),"object"!=typeof e)throw new Error("Measures cannot be blank");this.measureData=e}from(e){if(null!=this.destination)throw new Error(".from must be called before .to");return this.origin=this.getUnit(e),null==this.origin&&this.throwUnsupportedUnitError(e),this}to(e){var t,r;if(null==this.origin)throw new Error(".to must be called after .from");this.destination=this.getUnit(e),null==this.destination&&this.throwUnsupportedUnitError(e);const n=this.destination,a=this.origin;if(a.abbr===n.abbr)return this.val;if(n.measure!=a.measure)throw new Error(`Cannot convert incompatible measures of ${n.measure} and ${a.measure}`);let i=this.val*a.unit.to_anchor;if(a.unit.anchor_shift&&(i-=a.unit.anchor_shift),a.system!=n.system){const e=this.measureData[a.measure].anchors;if(null==e)throw new Error(`Unable to convert units. Anchors are missing for "${a.measure}" and "${n.measure}" measures.`);const s=e[a.system];if(null==s)throw new Error(`Unable to find anchor for "${a.measure}" to "${n.measure}". Please make sure it is defined.`);const o=null===(t=s[n.system])||void 0===t?void 0:t.transform,l=null===(r=s[n.system])||void 0===r?void 0:r.ratio;if("function"==typeof o)i=o(i);else{if("number"!=typeof l)throw new Error("A system anchor needs to either have a defined ratio number or a transform function.");i*=l}}return n.unit.anchor_shift&&(i+=n.unit.anchor_shift),i/n.unit.to_anchor}toBest(e){var t,r,n;if(null==this.origin)throw new Error(".toBest must be called after .from");const a=this.val<0;let i=[],s=a?-1:1,o=this.origin.system;"object"==typeof e&&(i=null!==(t=e.exclude)&&void 0!==t?t:[],s=null!==(r=e.cutOffNumber)&&void 0!==r?r:s,o=null!==(n=e.system)&&void 0!==n?n:this.origin.system);let l=null;for(const u of this.possibilities()){const e=this.describe(u);if(-1===i.indexOf(u)&&e.system===o){const t=this.to(u);if(a?t>s:t<s)continue;(null===l||(a?t<=s&&t>l.val:t>=s&&t<l.val))&&(l={val:t,unit:u,singular:e.singular,plural:e.plural})}}return l}getUnit(e){for(const[t,r]of Object.entries(this.measureData))for(const[n,a]of Object.entries(r.systems))for(const[r,i]of Object.entries(a))if(r==e)return{abbr:e,measure:t,system:n,unit:i};return null}describe(e){const t=this.getUnit(e);if(null!=t)return this.describeUnit(t);this.throwUnsupportedUnitError(e)}describeUnit(e){return{abbr:e.abbr,measure:e.measure,system:e.system,singular:e.unit.name.singular,plural:e.unit.name.plural}}list(e){const t=[];if(null==e)for(const[r,n]of Object.entries(this.measureData))for(const[e,a]of Object.entries(n.systems))for(const[n,i]of Object.entries(a))t.push(this.describeUnit({abbr:n,measure:r,system:e,unit:i}));else{if(!(e in this.measureData))throw new Error(`Meausre "${e}" not found.`);{const r=this.measureData[e];for(const[n,a]of Object.entries(r.systems))for(const[r,i]of Object.entries(a))t.push(this.describeUnit({abbr:r,measure:e,system:n,unit:i}))}}return t}throwUnsupportedUnitError(e){let t=[];for(const r of Object.values(this.measureData))for(const e of Object.values(r.systems))t=t.concat(Object.keys(e));throw new Error(`Unsupported unit ${e}, use one of: ${t.join(", ")}`)}possibilities(e){let t=[],r=[];"string"==typeof e?r.push(e):null!=this.origin?r.push(this.origin.measure):r=Object.keys(this.measureData);for(const n of r){const e=this.measureData[n].systems;for(const r of Object.values(e))t=[...t,...Object.keys(r)]}return t}measures(){return Object.keys(this.measureData)}}const t=(r={mass:{systems:{metric:{mcg:{name:{singular:"Microgram",plural:"Micrograms"},to_anchor:1e-6},mg:{name:{singular:"Milligram",plural:"Milligrams"},to_anchor:.001},g:{name:{singular:"Gram",plural:"Grams"},to_anchor:1},kg:{name:{singular:"Kilogram",plural:"Kilograms"},to_anchor:1e3},mt:{name:{singular:"Metric Tonne",plural:"Metric Tonnes"},to_anchor:1e6}},imperial:{oz:{name:{singular:"Ounce",plural:"Ounces"},to_anchor:1/16},lb:{name:{singular:"Pound",plural:"Pounds"},to_anchor:1},t:{name:{singular:"Ton",plural:"Tons"},to_anchor:2e3}}},anchors:{metric:{imperial:{ratio:1/453.592}},imperial:{metric:{ratio:453.592}}}},volume:{systems:{metric:{mm3:{name:{singular:"Cubic Millimeter",plural:"Cubic Millimeters"},to_anchor:1e-6},cm3:{name:{singular:"Cubic Centimeter",plural:"Cubic Centimeters"},to_anchor:.001},ml:{name:{singular:"Millilitre",plural:"Millilitres"},to_anchor:.001},cl:{name:{singular:"Centilitre",plural:"Centilitres"},to_anchor:.01},dl:{name:{singular:"Decilitre",plural:"Decilitres"},to_anchor:.1},l:{name:{singular:"Litre",plural:"Litres"},to_anchor:1},kl:{name:{singular:"Kilolitre",plural:"Kilolitres"},to_anchor:1e3},Ml:{name:{singular:"Megalitre",plural:"Megalitres"},to_anchor:1e6},Gl:{name:{singular:"Gigalitre",plural:"Gigalitres"},to_anchor:1e9},m3:{name:{singular:"Cubic meter",plural:"Cubic meters"},to_anchor:1e3},km3:{name:{singular:"Cubic kilometer",plural:"Cubic kilometers"},to_anchor:1e12},krm:{name:{singular:"Kryddmått",plural:"Kryddmått"},to_anchor:.001},tsk:{name:{singular:"Tesked",plural:"Teskedar"},to_anchor:.005},msk:{name:{singular:"Matsked",plural:"Matskedar"},to_anchor:.015},kkp:{name:{singular:"Kaffekopp",plural:"Kaffekoppar"},to_anchor:.15},glas:{name:{singular:"Glas",plural:"Glas"},to_anchor:.2},kanna:{name:{singular:"Kanna",plural:"Kannor"},to_anchor:2.617}},imperial:{tsp:{name:{singular:"Teaspoon",plural:"Teaspoons"},to_anchor:1/6},Tbs:{name:{singular:"Tablespoon",plural:"Tablespoons"},to_anchor:.5},in3:{name:{singular:"Cubic inch",plural:"Cubic inches"},to_anchor:.55411},"fl-oz":{name:{singular:"Fluid Ounce",plural:"Fluid Ounces"},to_anchor:1},cup:{name:{singular:"Cup",plural:"Cups"},to_anchor:8},pnt:{name:{singular:"Pint",plural:"Pints"},to_anchor:16},qt:{name:{singular:"Quart",plural:"Quarts"},to_anchor:32},gal:{name:{singular:"Gallon",plural:"Gallons"},to_anchor:128},ft3:{name:{singular:"Cubic foot",plural:"Cubic feet"},to_anchor:957.506},yd3:{name:{singular:"Cubic yard",plural:"Cubic yards"},to_anchor:25852.7}}},anchors:{metric:{imperial:{ratio:33.8140226}},imperial:{metric:{ratio:1/33.8140226}}}}},t=>new e(r,t));var r;const n=["krm","tsk","msk","kkp","glas","kanna","dl","qt","pnt","fl-oz","in3","Tbs","tsp"],a=75*Math.random()+25;let i=!1;function s(e,r,s,o){if(!e.checkValidity())return;const l=Math.max(e.valueAsNumber,1)||r;l>a&&!i&&(document.querySelector(".ingredient-form").insertAdjacentHTML("beforebegin",'\n    <div class="notification info a-lot-of-food">\n    Wow, that\'s a lot of food! Am I invited to the party?\n    </div>'),i=!0),l<=a&&i&&(document.querySelector(".a-lot-of-food").remove(),i=!1);for(const a of s){let e=JSON.parse(a.dataset.metric),i=e.unit||"";o&&"{}"!==a.dataset.imperial&&(e=JSON.parse(a.dataset.imperial),i=e.unit||i);let s=Math.round(100*(e.quantity*l/r+Number.EPSILON))/100;if(e.unit)try{const e=o?"imperial":"metric",r=t(s).from(i).toBest({system:e,exclude:n});s=Math.round(100*r.val)/100,i=r.unit||i}catch(u){i=` ${s>=2?e.plural||i:e.unit}`}("cup"===i||"lb"===i)&&s>1&&(i=`${i}s`),a.innerHTML=`${s}`,a.nextElementSibling.innerHTML=` ${i}`}}!function(){const e=document.querySelector(".ingredient-form"),t=[...document.querySelectorAll(".list-ingredients li div output")],r=e.querySelector("input"),n=e.querySelector("#switch");"imperial"===localStorage.getItem("unit-metric")&&(n.checked=!0),n.addEventListener("change",(e=>{localStorage.setItem("unit-system",e.target.checked?"imperial":"metric"),s(r,a,t,e.target.checked)}));const a=Number.parseInt(r.dataset.default);r.addEventListener("input",(e=>{s(e.target,a,t,n.checked)})),s(r,a,t,n.checked)}();
